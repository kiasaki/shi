; Syntax
; ==========================

; quote - Primitive
; gensym - Primitive
; macro - Primitive
; macro-expand - Primitive
; def - Primitive
; set - Primitive
; fn - Primitive
; if - Primitive
; do - Primitive

(def list (fn xs xs))

(def defn (macro (name args . exprs)
  (list 'def name (cons 'fn (cons args exprs)))))

(def defmacro (macro (name args . exprs)
  (list 'def name (cons 'macro (cons args exprs)))))

; Types
; ==========================

; nil - Primitive
; t - Primitive
; type - Primitive

(defn true? (x)
  (eq? (type x) 'true))
(defn nil? (x)
  (eq? (type x) 'nil))
(defn int? (x)
  (eq? (type x) 'int))
(defn str? (x)
  (eq? (type x) 'str))
(defn cons? (x)
  (eq? (type x) 'cons))
(defn list? (x)
  (eq? (type x) 'list))
(defn sym? (x)
  (eq? (type x) 'sym))
(defn obj? (x)
  (eq? (type x) 'obj))
(defn prim? (x)
  (eq? (type x) 'prim))
(defn fn? (x)
  (eq? (type x) 'fn))
(defn macro? (x)
  (eq? (type x) 'macro))
(defn atom? (x)
  (if (true? x) t (nil? x) t (int? x) t (str? x) t (sym? x) t nil))

; Conditionals
; ==========================

; eq? - Primitive

(def cond if)
(def else t)

(defn not (x)
  (if x nil t))

(defmacro when (test . body)
  (list 'if test (cons 'do body)))

(defmacro unless (test . body)
  (list 'if (list 'not test) (cons 'do body)))

; Lists
; ==========================

; cons - Primitive
; car - Primitive
; cdr - Primitive
; set-car! - Primitive
; while - Primitive

(def first car)
(def rest cdr)

(defn caar (x) (car (car x)))
(defn cadr (x) (car (cdr x)))
(defn second (x) (car (cdr x)))
(defn cdar (x) (cdr (car x)))
(defn cddr (x) (cdr (cdr x)))
(defn caaar (x) (car (car (car x))))
(defn caadr (x) (car (car (cdr x))))
(defn cadar (x) (car (cdr (car x))))
(defn caddr (x) (car (cdr (cdr x))))
(defn third (x) (car (cdr (cdr x))))
(defn cdaar (x) (cdr (car (car x))))
(defn cdadr (x) (cdr (car (cdr x))))
(defn cddar (x) (cdr (cdr (car x))))
(defn cdddr (x) (cdr (cdr (cdr x))))

(defn length (x)
  (cond (nil? x) 0
        (do
          (def i 1)
          (while (list? (cdr x))
            (set x (cdr x))
            (set i (+ i 1)))
          i)))

(defn reverse (in)
  (if in (do
    (def out nil)
    (while (cdr in)
      (set out (cons (car in) out))
      (set in (cdr in)))
    (cons (car in) out))))

(defn nth (lst n)
  (def i 0)
  (while (< i n)
    (set lst (cdr lst))
    (set i (+ i 1)))
  (car lst))

(defn empty? (lst)
  (= (length lst) 0))

; Numbers
; ==========================

(defn range (start end)
  (def ret nil)
  (def i end)
  (while (> i start)
    (set i (- i 1))
    (set ret (cons i ret)))
  ret)

(defn > (x y) (< y x))
(defn >= (x y) (not (< x y)))
(defn <= (x y) (not (< y x)))
(defn /= (x y) (not (= x y)))

(defn pair? (x)
  (eq? (mod x 2) 0))

(defn odd? (x)
  (not (pair? x)))

(defn add1 (x)
  (+ x 1))

(defn sub1 (x)
  (- x 1))

(defn min (x y)
  (if (< x y) x y))

(defn max (x y)
  (if (> x y) x y))

(defn abs (x)
  (cond (= x 0) 0
        (< x 0) (- x)
        x))

(defn num->str (x)
  (pr-str x))

; Iteration
; ==========================

(defmacro dolist (var-and-list . body)
  (def var-name (first var-and-list))
  (if (sym? var-name) nil (error "dolist: item var not symbol"))
  (def list-val (second var-and-list))
  (def ret-val (if (nil? (cddr var-and-list))
    nil
    (third var-and-list)))
  (def list-name (gensym))
  (list 'do
    (list 'def list-name list-val)
    (list 'def var-name (list 'if
      (list 'nil? list-name) nil
      (list 'car list-name)))
    (cons 'while
      (cons (list 'and (list 'list? list-name) (list 'not (list 'empty? list-name)))
        (cons (list 'set var-name (list 'car list-name))
          (cons (list 'set list-name (list 'cdr list-name))
            body))))
    ret-val))

(defmacro dotimes (var-and-num . body)
  (if (int? (second var-and-num)) nil (error "dotimes: need a number"))
  (def var-name (first var-and-num))
  (def numbers (range 0 (second var-and-num)))
  (cons dolist (cons (list var-name (cons 'list numbers)) body)))

(defn map (f coll)
  (def ret nil)
  (dolist (x coll (reverse ret))
    (set ret (cons (f x) ret))))

; (reduce fn coll) -or- (reduce fn init coll)
(defn reduce (f . args)
  (if (cdr args)
    (do
      (def ret (first args))
      (def coll (second args)))
    (do
      (def ret (first (first args)))
      (def coll (rest (first args)))))
  (dolist (x coll ret)
    (set ret (f ret x))))


; Conditionals (suite)
; ==========================

(defn eql? (a b)
  (cond (and (int? a) (int? b))
          (= a b)
        (eq? a b)))

(defmacro or xs
  (unless (empty? xs)
    (def x-name (gensym))
    (list 'do
      (set x-name (first xs))
      (list 'if x-name x-name (cons 'or (rest xs))))))

(defmacro and xs
  (if (empty? xs) t
      (empty? (rest xs)) (first xs)
      (list 'if (first xs) (cons 'and (rest xs)) nil)))


; Functions
; ==========================

(defn identity (x) x)

(defn curry (f . args)
  (fn args2
    (apply f (extend args args2))))

(defn compose fns
  (def call (fn (fns args)
    (if (cdr fns)
          ((car fns) (call (cdr fns) args))
          (apply (car fns) args))))
  (fn args (call fns args)))

(defmacro -> (x . forms)
  (def loop (fn (x forms)
    (if forms
      (do
        (def form (first forms))
        (def threaded (if (list? form)
                         (cons (first form) (cons x (rest form)))
                         (list form x)))
        (loop threaded (rest forms)))
      x)))
  (loop x forms))


; Boxes
; ==========================

(defn box (x)
  (list x))

(defn unbox (box)
  (car box))

(defn swap! (box f)
  (set-car! box (f (unbox box))))


; A-List
; ==========================

(defn alist? (al)
  (def all-cons? t)
  (cond
    (nil? al) t
    (not (list? al)) nil
    (dolist (item al all-cons?)
      (if (not (cons? item))
        (set all-cons? nil)))))

(defn alist-has? (al k)
  (def found? nil)
  (dolist (item al found?)
    (when (eql? (first item) k)
      (set found? t))))

(defn alist-get (al . args)
  (def res nil)
  (def key (first args))
  (if (cdr args)
    (set res (second args)))
  (dolist (item al res)
    (when (eql? (car item) key)
      (set res (cdr item)))))

(defn alist-set* (al k v)
  (reduce
    (fn (coll item)
      (cond
        (eql? (first item) k) (cons (cons k v) coll)
        else (cons item coll)))
    (list) al))

(defn alist-set (al k v)
  (if (alist-has? al k)
    (alist-set* al k v)
    (cons (cons k v) al)))

(defn alist-set-in (al path v)
  (if path
    (alist-set al
      (first path)
      (alist-set-in (alist-get al (first path)) (rest path) v))
    v))

(defn alist-update (al k f)
  (alist-set al k (f (alist-get al k))))

(defn alist-update-in (al path f)
  (if (rest path)
    (alist-set al
      (first path)
      (alist-update-in (alist-get al (first path)) (rest path) f))
    (alist-update al (first path) f)))

(defn alist-del (al k)
  (reduce
    (fn (coll item)
      (cond
        (eq? (first item) k) coll
        (cons item coll)))
    (list) al))

(defn alist-keys (al)
  (map (fn (kv) (first kv)) al))

(defn alist-vals (al)
  (map (fn (kv) (second kv)) al))


; Objects
; ==========================

(defmacro : (obj prop)
  (def val-name (gensym))
  (list 'do
    (list 'def val-name (list 'obj-get obj prop))
    (list 'if (list 'fn? val-name)
      (list 'curry val-name obj)
      val-name)))

(defn super (obj prop . args)
  (def v (obj-get (obj-proto obj) prop))
  (if (fn? v)
    (apply v args)
    v))

(defn new (o . args)
  (def inst (obj o '()))
  (apply inst:new args)
  o)

(def Obj (obj nil (list
  (cons 'init (fn (self) nil)))))


; Collections
; ==========================

(defn list-extend colls
  (def ret nil)
  (dolist (c colls)
    (dolist (x c)
      (set ret (cons x ret))))
  (reverse ret))

(defn conj (coll item)
  (cond (list? coll)
          (cons item coll)
        (error "conj: not a collection")))

(defn extend colls
  (cond (empty? colls) nil
        (list? (first colls))
          (apply list-extend colls)
        (error "extend: not a collection")))

; Syntax (suite)
; ==========================

(defn qq-expand-list (exp)
  (cond
    (and (list? exp) (empty? exp))
      exp
    (list? exp)
      (cond
        (eq? 'unquote (first exp))
          (list 'list (second exp))
        (eq? 'unquote-splicing (first exp))
          (second exp)
        (eq? 'quasiquote (first exp))
          (qq-expand-list (qq-expand (second exp)))
        (list 'list (list 'extend (qq-expand-list (first exp)) (qq-expand (rest exp)))))
    (list 'list exp)))

(defn qq-expand (exp)
  (cond
    (and (list? exp) (empty? exp))
      exp
    ;(vec? exp)
    ;  (list 'apply 'vec (qq-expand (vec->list exp) nesting))
    (list? exp)
      (cond
        (eq? 'unquote (first exp))
          (second exp)
        (eq? 'unquote-splicing (first exp))
          (error "illegal unquote-splicing at quasiquote root")
        (eq? 'quasiquote (first exp))
          (qq-expand (qq-expand (second exp)))
        (list 'extend (qq-expand-list (first exp)) (qq-expand (rest exp))))
    exp))

(defmacro quasiquote (exp)
  (qq-expand exp))

(defn unquote (x)
  (error "unquote called outside of quasiquote"))
(defn unquote-splicing (_)
  (error "unquote-splicing called outside of quasiquote"))

(defmacro let (args . body)
  ((fn (vars vals)
     (defn vars (x)
       (cond x (cons (if (atom? (car x))
                          (car x)
                        (caar x))
                      (vars (cdr x)))))
     (defn vals (x)
       (cond x (cons (if (atom? (car x))
                          nil
                        (cadar x))
                      (vals (cdr x)))))
     `((fn ,(vars args) ,@body) ,@(vals args)))
   nil nil))

; IO
; ==========================

; pr-str - Primitive
; open - Primitive
; close - Primitive
; write - Primitive
; read - Primitive
; sleep - Primitive
; exit - Primitive
; TODO getenv - Primitive
; TODO error - Primitive
; TODO trap-error - Primitive

(def *stdin* 0)
(def *stdout* 1)
(def *stderr* 2)
(def *in* *stdin*)
(def *out* *stdout*)

(def newline (fn ()
  (write *out* "\n")))

(def pr (fn (x)
  (write *out* (pr-str x))))

(def prn (fn (x)
  (pr x)
  (newline)))

(def print (fn (x)
  (write *out* x)))

(def println (fn (x)
  (print x)
  (newline)))

(defn read-all (path)
  (def fd (open path))
  (def contents "")
  (def last-read (read fd 255))
  (while (> (str-len last-read) 0)
    (set contents (str contents last-read))
    (set last-read (read fd 255)))
  (close fd)
  contents)

; HTTP
; ==========================

(def *http-codes* (list
  (cons 100 "Continue")
  (cons 101 "Switching Protocols")
  (cons 102 "Processing")
  (cons 200 "OK")
  (cons 201 "Created")
  (cons 202 "Accepted")
  (cons 203 "Non-Authoritative Information")
  (cons 204 "No Content")
  (cons 205 "Reset Content")
  (cons 206 "Partial Content")
  (cons 207 "Multi-Status")
  (cons 208 "Already Reported")
  (cons 226 "IM Used")
  (cons 300 "Multiple Choices")
  (cons 301 "Moved Permanently")
  (cons 302 "Found")
  (cons 303 "See Other")
  (cons 304 "Not Modified")
  (cons 305 "Use Proxy")
  (cons 307 "Temporary Redirect")
  (cons 308 "Permanent Redirect")
  (cons 400 "Bad Request")
  (cons 401 "Unauthorized")
  (cons 402 "Payment Required")
  (cons 403 "Forbidden")
  (cons 404 "Not Found")
  (cons 405 "Method Not Allowed")
  (cons 406 "Not Acceptable")
  (cons 407 "Proxy Authentication Required")
  (cons 408 "Request Timeout")
  (cons 409 "Conflict")
  (cons 410 "Gone")
  (cons 411 "Length Required")
  (cons 412 "Precondition Failed")
  (cons 413 "Payload Too Large")
  (cons 414 "URI Too Long")
  (cons 415 "Unsupported Media Type")
  (cons 416 "Range Not Satisfiable")
  (cons 417 "Expectation Failed")
  (cons 418 "I'm a teapot")
  (cons 421 "Misdirected Request")
  (cons 422 "Unprocessable Entity")
  (cons 423 "Locked")
  (cons 424 "Failed Dependency")
  (cons 425 "Unordered Collection")
  (cons 426 "Upgrade Required")
  (cons 428 "Precondition Required")
  (cons 429 "Too Many Requests")
  (cons 431 "Request Header Fields Too Large")
  (cons 451 "Unavailable For Legal Reasons")
  (cons 500 "Internal Server Error")
  (cons 501 "Not Implemented")
  (cons 502 "Bad Gateway")
  (cons 503 "Service Unavailable")
  (cons 504 "Gateway Timeout")
  (cons 505 "HTTP Version Not Supported")
  (cons 506 "Variant Also Negotiates")
  (cons 507 "Insufficient Storage")
  (cons 508 "Loop Detected")
  (cons 509 "Bandwidth Limit Exceeded")
  (cons 510 "Not Extended")
  (cons 511 "Network Authentication Required")))

(defn http/server (host port)
  (unless (str? host) (error "http/server: host not string"))
  (unless (int? port) (error "http/server: port not int"))

  (def backlog-len 32)
  (def listen-fd (socket PF_INET SOCK_STREAM 0))
  (bind-inet listen-fd host port)
  (listen listen-fd backlog-len)

  (box (list
         (cons 'listen-sock listen-fd)
         (cons 'running nil)
         (cons 'handlers '()))))

(defn http/listen (srv)
  (swap! srv (fn (srv) (alist-set srv 'running t)))
  (def client-fd nil)
  (while (alist-get @srv 'running)
    ; Read
    (set client-fd (accept (alist-get @srv 'listen-sock)))
    (when client-fd
      (def req (list))
      (def res
        (list
          (cons 'code 200)
          (cons 'body "")
          (cons 'headers (list (cons 'Content-Type "text/plain")))))
      (def handler-fn (alist-get (car (alist-get @srv 'handlers)) 'handler-fn))

      ; Handle
      (set res (handler-fn req res))

      ; Write
      (write client-fd "HTTP/1.1 ")
      (write client-fd (pr-str (alist-get res 'code)))
      (write client-fd (str " " (alist-get *http-codes* (alist-get res 'code)) "\n"))
      ; Write: headers
      (dolist (h (alist-get res 'headers))
        (write client-fd (str (pr-str (car h)) ": " (cdr h) "\n")))
      (write client-fd (str "Connection: close\n"))
      ; Write: body
      (def body-len (str-len (alist-get res 'body)))
      (when (> body-len 0)
        (write client-fd (str "Content-Length: " (pr-str body-len) "\n\n"))
        (write client-fd (alist-get res 'body)))

      (sleep 500)
      (close client-fd)))
  (close (alist-get @srv 'listen-sock)))

(defn http/close (srv)
  (swap! srv (fn (srv) (alist-set srv 'running nil))))

(defn http/add (srv method path handler-fn)
  (swap! srv (fn (srv)
    (alist-set srv 'handlers
      (cons
        (list (cons 'method method)
              (cons 'path path)
              (cons 'handler-fn handler-fn))
        (alist-get srv 'handlers))))))

(defn http/get (srv path handler-fn)
  (http/add srv 'GET path handler-fn))

(defn http/post (srv path handler-fn)
  (http/add srv 'POST path handler-fn))

(defn http/put (srv path handler-fn)
  (http/add srv 'PUT path handler-fn))

(defn http/del (srv path handler-fn)
  (http/add srv 'DELETE path handler-fn))

(defn http/head (srv path handler-fn)
  (http/add srv 'HEAD path handler-fn))
