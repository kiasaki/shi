; Syntax
; ==========================

; quote - Primitive
; gensym - Primitive
; macro - Primitive
; macro-expand - Primitive
; def - Primitive
; set - Primitive
; fn - Primitive
; if - Primitive
; do - Primitive

(def list (fn (x . y) (cons x y)))

(def defn (macro (name args . exprs)
  (list 'def name (cons 'fn (cons args exprs)))))

(def defmacro (macro (name args . exprs)
  (list 'def name (cons 'macro (cons args exprs)))))

; Types
; ==========================

; nil - Primitive
; t - Primitive
; type - Primitive

(defn true? (x)
  (eq (type x) 'true))
(defn nil? (x)
  (eq (type x) 'nil))
(defn int? (x)
  (eq (type x) 'int))
(defn str? (x)
  (eq (type x) 'str))
(defn cons? (x)
  (eq (type x) 'cons))
(defn list? (x)
  (eq (type x) 'list))
(defn sym? (x)
  (eq (type x) 'sym))
(defn prim? (x)
  (eq (type x) 'prim))
(defn fn? (x)
  (eq (type x) 'fn))
(defn macro? (x)
  (eq (type x) 'macro))
(defn atom? (x)
  (if (true? x) t (nil? x) t (int? x) t (str? x) t (sym? x) t nil))

; Conditionals
; ==========================

; eq - Primitive

(def cond if)

(defn not (x)
  (if x nil t))

(defmacro when (test . body)
  (list 'if test (cons 'do body)))

(defmacro unless (test . body)
  (list 'if (list 'not test) (cons 'do body)))

; Functions
; ==========================

(defn identity (x) x)

; Lists
; ==========================

; cons - Primitive
; car - Primitive
; cdr - Primitive
; setcar - Primitive
; while - Primitive

(defn first (x)
  (car x))

(defn rest (x)
  (cdr x))

(defn caar (x) (car (car x)))
(defn cadr (x) (car (cdr x)))
(defn second (x) (car (cdr x)))
(defn cdar (x) (cdr (car x)))
(defn cddr (x) (cdr (cdr x)))
(defn caaar (x) (car (car (car x))))
(defn caadr (x) (car (car (cdr x))))
(defn cadar (x) (car (cdr (car x))))
(defn caddr (x) (car (cdr (cdr x))))
(defn third (x) (car (cdr (cdr x))))
(defn cdaar (x) (cdr (car (car x))))
(defn cdadr (x) (cdr (car (cdr x))))
(defn cddar (x) (cdr (cdr (car x))))
(defn cdddr (x) (cdr (cdr (cdr x))))

(defn length (x)
  (if (nil? x) 0
        (do
          (def i 1)
          (while (list? (cdr x))
            (set x (cdr x))
            (set i (+ i 1)))
          i)))

(defn reverse (in)
  (if in (do
    (def out nil)
    (while (cdr in)
      (set out (cons (car in) out))
      (set in (cdr in)))
    (cons (car in) out))))

(defn nth (lst n)
  (def i 0)
  (while (< i n)
    (set lst (cdr lst))
    (set i (+ i 1)))
  (car lst))

(defn empty? (lst)
  (= (length lst) 0))

; Numbers
; ==========================

(defn range (start end)
  (def ret nil)
  (def i end)
  (while (> i start)
    (set i (- i 1))
    (set ret (cons i ret)))
  ret)

(defn > (x y) (< y x))
(defn >= (x y) (not (< x y)))
(defn <= (x y) (not (< y x)))
(defn /= (x y) (not (= x y)))

(defn pair? (x)
  (eq (mod x 2) 0))

(defn odd? (x)
  (not (pair? x)))

; Iteration
; ==========================

(defmacro dolist (var-and-list . body)
  (def var-name (first var-and-list))
  (if (sym? var-name) nil (error "dolist: item var not symbol"))
  (def list-val (second var-and-list))
  (def ret-val (if (nil? (cddr var-and-list))
    nil
    (third var-and-list)))
  (def list-name (gensym))
  (list 'do
    (list 'def list-name list-val)
    (list 'def var-name (list 'car list-val))
    (cons 'while
      (cons (list 'list? list-name)
        (cons (list 'set var-name (list 'car list-name))
          (cons (list 'set list-name (list 'cdr list-name))
            body))))
    ret-val))

(defmacro dotimes (var-and-num . body)
  (if (int? (second var-and-num)) nil (error "dotimes: need a number"))
  (def var-name (first var-and-num))
  (def numbers (range 0 (second var-and-num)))
  (cons dolist (cons (list var-name (cons 'list numbers)) body)))

(defn map (f coll)
  (def ret nil)
  (dolist (x coll (reverse ret))
    (set ret (cons (f x) ret))))

(defn reduce (f . args)
  (if (cdr args)
    (do
      (def ret (first args))
      (def coll (second args)))
    (do
      (def ret (first (first args)))
      (def coll (rest (first args)))))

  (dolist (x coll ret)
    (set ret (f ret x))))

; Conditionals (suite)
; ==========================

; TODO eql

(defmacro or xs
  (unless (empty? xs)
    (def x-name (gensym))
    (list 'do
      (set x-name (first xs))
      (list 'if x-name x-name (cons 'or (rest xs))))))

(defmacro and xs
  (if (empty? xs) t
      (empty? (rest xs)) (first xs)
      (list 'if (first xs) (cons 'and (rest xs)) nil)))

; Collections
; ==========================

(defn list-extend colls
  (def ret nil)
  (dolist (c colls)
    (dolist (x c)
      (set ret (cons x ret))))
  ret)

(defn conj (coll item)
  (cond (list? coll)
          (cons item coll)
        (error "conj: not a collection")))

(defn extend colls
  (cond (empty? colls) nil
        (list? (first colls))
          (apply list-extend colls)
        (error "extend: not a collection")))

; Syntax (suite)
; ==========================

(defn qq-expand-list (exp)
  (cond
    (and (list? exp) (empty? exp))
      exp
    (list? exp)
      (cond
        (eq 'unquote (first exp))
          (list 'list (second exp))
        (eq 'unquote-splicing (first exp))
          (second exp)
        (eq 'quasiquote (first exp))
          (qq-expand-list (qq-expand (second exp)))
        (list 'list (list 'append (qq-expand-list (first exp)) (qq-expand (rest exp)))))
    (list 'list exp)))

(defn qq-expand (exp)
  (cond
    (and (list? exp) (empty? exp))
      exp
    ;(vec? exp)
    ;  (list 'apply 'vec (qq-expand (vec->list exp) nesting))
    (list? exp)
      (cond
        (eq 'unquote (first exp))
          (second exp)
        (eq 'unquote-splicing (first exp))
          (error "illegal unquote-splicing at quasiquote root")
        (eq 'quasiquote (first exp))
          (qq-expand (qq-expand (second exp)))
        (list 'append (qq-expand-list (first exp)) (qq-expand (rest exp))))
    exp))

(defmacro quasiquote (exp)
  (qq-expand exp))

(defn unquote (x)
  (error "unquote called outside of quasiquote"))
(defn unquote-splicing (_)
  (error "unquote-splicing called outside of quasiquote"))

(defmacro let (args . body)
  ((fn (vars vals)
     (defn vars (x)
       (cond x (cons (if (atom? (car x))
                          (car x)
                        (caar x))
                      (vars (cdr x)))))
     (defn vals (x)
       (cond x (cons (if (atom? (car x))
                          nil
                        (cadar x))
                      (vals (cdr x)))))
     `((lambda ,(vars args) ,@body) ,@(vals args)))
   nil nil))

; IO
; ==========================

; pr-str - Primitive
; write - Primitive

; TODO getenv - Primitive
; TODO open - Primitive
; TODO close - Primitive
; TODO writeb - Primitive
; TODO readb - Primitive
; TODO std{in,out,err} - Primitive
; TODO exit - Primitive
; TODO error - Primitive
; TODO trap-error - Primitive
; TODO sleep - Primitive

(def *stdin* 1)
(def *stdout* 2)
(def *stderr* 3)
(def *in* *stdin*)
(def *out* *stdout*)

(def newline (fn ()
  (write *out* "\n")))

(def pr (fn (x)
  (write *out* (pr-str x))))

(def prn (fn (x)
  (pr x)
  (newline)))

(def print (fn (x)
  (write *out* x)))

(def println (fn (x)
  (print x)
  (newline)))
