(fn ()
(println "starting")

(def host "0.0.0.0")
(def port 8080)
(def backlog-len 32)

(def listen-fd (socket PF_INET SOCK_STREAM 0))

(bind-inet listen-fd host port)
(listen listen-fd backlog-len)

(def *running* t)
(def client-fd nil)

; Handle SIGINT and gracefully shutdown
; (signal SIGINT (fn () (set *running* nil)))

(while *running*
  (set client-fd (accept listen-fd))
  (write client-fd "HTTP/1.1 200 OK
Content-Length: 12
Connection: close
Content-Type: text/plain

Hello world!")
  (sleep 500)
  (close client-fd))

(close listen-fd)
(exit 0)
)


(def al '((a . 1) (b . 2) (c . 3)))

(prn (list "@al" al))

(prn (list "alist?" (alist? al)))

(prn (list "alist-has? b" (alist-has? al 'b)))
(prn (list "alist-has? z" (alist-has? al 'z)))

(prn (list "alist-get a" (alist-get al 'b)))
(prn (list "alist-get z" (alist-get al 'z)))
(prn (list "alist-get z 66" (alist-get al 'z 66)))

(prn (list "alist-set c -1" (alist-set al 'c -1)))
(prn (list "alist-set z 654" (alist-set al 'z 654)))

(prn (list "alist-del a" (alist-del al 'a)))

(prn (list "@al" al))
